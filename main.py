# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QMessageBox, QCompleter, QButtonGroup, QDialog
import sys
from PyQt5.QtCore import Qt
from window import Ui_MainWindow
import xlrd
import xlwt
import time
from pprint import pprint  # pprint的输出形式为一行输出一个结果，下一个结果换行输出。实质上pprint输出的结果更为完整
import json
import pandas as pd
import os
from os import startfile
import csv
from Dialog import Ui_Dialog
from Dialog_hint import Ui_Dialog_hint
dataBase = []
key_label = []
data_dict_oneLine = {}
dataGroup = []
saveCon = 0
index_cur = 0
from Alise import *

rootPath = os.path.dirname(os.path.realpath(sys.executable))
rem_tmp = []


class HintWindow(QDialog, Ui_Dialog_hint):
    def __init__(self):
        super().__init__()
        self.setWindowFlag(Qt.WindowMinimizeButtonHint)
        self.setupUi(self)

        self.pushButton_back.clicked.connect(self.back)
        self.textEdit_hint.setText(dataGroup[index_cur][describeAlise])

    def back(self):
        self.close()

    def showDialog(self):
        self.show()


class DialogWindow(QDialog, Ui_Dialog):
    def __init__(self):
        super().__init__()
        self.setWindowFlag(Qt.WindowMinimizeButtonHint)
        self.setupUi(self)

        self.pushButton_yes.clicked.connect(self.yes)
        self.pushButton_no.clicked.connect(self.no)
        self.textEdit.setText(rem_tmp)

    def yes(self):
        global rem_tmp
        rem_tmp = self.textEdit.toPlainText()
        self.close()

    def no(self):
        global rem_tmp
        rem_tmp = dataGroup[index_cur][remarkAlise]
        self.close()

    def showDialog(self):
        self.show()


class MyWindow(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowFlag(Qt.WindowMinimizeButtonHint)
        self.setFixedSize(1366, 768)
        self.setupUi(self)
        self.set_all_able(False)
        self.set_box_able(False)
        self.pushButton_next.clicked.connect(self.glossNext)
        self.pushButton_prev.clicked.connect(self.glossprev)
        self.pushButton_toIndex.clicked.connect(self.toIndex)
        self.pushButton_load.clicked.connect(self.load)
        self.pushButton_save.clicked.connect(self.save)
        self.pushButton_video_res.clicked.connect(self.open_video_res)
        self.pushButton_video_per.clicked.connect(self.open_video_pre)
        self.pushButton_readme.clicked.connect(self.readme)
        self.pushButton_output.clicked.connect(self.output)
        self.pushButton_hint.clicked.connect(self.hint)

        self.radioButton_1.clicked.connect(self.set_change_able)
        self.radioButton_2.clicked.connect(self.set_change_able)
        self.radioButton_3.clicked.connect(self.set_change_able)

        self.checkBox_L_1.clicked.connect(self.set_L_1_able)
        self.checkBox_L_2.clicked.connect(self.set_L_2_able)
        self.checkBox_L_3.clicked.connect(self.set_L_3_able)
        self.checkBox_L_4.clicked.connect(self.set_L_4_able)

        self.checkBox_R_1.clicked.connect(self.set_R_1_able)
        self.checkBox_R_2.clicked.connect(self.set_R_2_able)
        self.checkBox_R_3.clicked.connect(self.set_R_3_able)
        self.checkBox_R_4.clicked.connect(self.set_R_4_able)

        def connectCondiChange():
            self.lineEdit_pattern_start_L_1.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_index_L_1.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_end_L_1.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_fade_out_L_1.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_fade_in_L_1.textChanged.connect(self.saveCondiChange)

            self.lineEdit_pattern_start_L_2.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_index_L_2.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_end_L_2.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_fade_out_L_2.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_fade_in_L_2.textChanged.connect(self.saveCondiChange)

            self.lineEdit_pattern_start_L_3.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_index_L_3.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_end_L_3.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_fade_out_L_3.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_fade_in_L_3.textChanged.connect(self.saveCondiChange)

            self.lineEdit_pattern_start_L_4.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_index_L_4.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_end_L_4.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_fade_out_L_4.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_fade_in_L_4.textChanged.connect(self.saveCondiChange)

            self.lineEdit_pattern_start_R_1.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_index_R_1.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_end_R_1.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_fade_out_R_1.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_fade_in_R_1.textChanged.connect(self.saveCondiChange)

            self.lineEdit_pattern_start_R_2.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_index_R_2.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_end_R_2.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_fade_out_R_2.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_fade_in_R_2.textChanged.connect(self.saveCondiChange)

            self.lineEdit_pattern_start_R_3.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_index_R_3.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_end_R_3.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_fade_out_R_3.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_fade_in_R_3.textChanged.connect(self.saveCondiChange)

            self.lineEdit_pattern_start_R_4.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_index_R_4.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_end_R_4.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_fade_out_R_4.textChanged.connect(self.saveCondiChange)
            self.lineEdit_pattern_fade_in_R_4.textChanged.connect(self.saveCondiChange)

        connectCondiChange()

    def set_box_able(self, con: bool):
        self.checkBox_L_1.setEnabled(con)
        self.checkBox_L_2.setEnabled(con)
        self.checkBox_L_3.setEnabled(con)
        self.checkBox_L_4.setEnabled(con)

        self.checkBox_R_1.setEnabled(con)
        self.checkBox_R_2.setEnabled(con)
        self.checkBox_R_3.setEnabled(con)
        self.checkBox_R_4.setEnabled(con)

    def set_box_check(self, con: bool):
        self.checkBox_L_1.setChecked(con)
        self.checkBox_L_2.setChecked(con)
        self.checkBox_L_3.setChecked(con)
        self.checkBox_L_4.setChecked(con)

        self.checkBox_R_1.setChecked(con)
        self.checkBox_R_2.setChecked(con)
        self.checkBox_R_3.setChecked(con)
        self.checkBox_R_4.setChecked(con)

    def set_all_able(self, con: bool):
        self.lineEdit_pattern_index_L_1.setEnabled(con)
        self.lineEdit_pattern_index_L_2.setEnabled(con)
        self.lineEdit_pattern_index_L_3.setEnabled(con)
        self.lineEdit_pattern_index_L_4.setEnabled(con)

        self.lineEdit_pattern_index_R_1.setEnabled(con)
        self.lineEdit_pattern_index_R_2.setEnabled(con)
        self.lineEdit_pattern_index_R_3.setEnabled(con)
        self.lineEdit_pattern_index_R_4.setEnabled(con)

        self.lineEdit_pattern_end_L_1.setEnabled(con)
        self.lineEdit_pattern_end_L_2.setEnabled(con)
        self.lineEdit_pattern_end_L_3.setEnabled(con)
        self.lineEdit_pattern_end_L_4.setEnabled(con)

        self.lineEdit_pattern_end_R_1.setEnabled(con)
        self.lineEdit_pattern_end_R_2.setEnabled(con)
        self.lineEdit_pattern_end_R_3.setEnabled(con)
        self.lineEdit_pattern_end_R_4.setEnabled(con)

        self.lineEdit_pattern_fade_out_L_1.setEnabled(con)
        self.lineEdit_pattern_fade_out_L_2.setEnabled(con)
        self.lineEdit_pattern_fade_out_L_3.setEnabled(con)
        self.lineEdit_pattern_fade_out_L_4.setEnabled(con)

        self.lineEdit_pattern_fade_out_R_1.setEnabled(con)
        self.lineEdit_pattern_fade_out_R_2.setEnabled(con)
        self.lineEdit_pattern_fade_out_R_3.setEnabled(con)
        self.lineEdit_pattern_fade_out_R_4.setEnabled(con)

        self.lineEdit_pattern_fade_in_L_1.setEnabled(con)
        self.lineEdit_pattern_fade_in_L_2.setEnabled(con)
        self.lineEdit_pattern_fade_in_L_3.setEnabled(con)
        self.lineEdit_pattern_fade_in_L_4.setEnabled(con)

        self.lineEdit_pattern_fade_in_R_1.setEnabled(con)
        self.lineEdit_pattern_fade_in_R_2.setEnabled(con)
        self.lineEdit_pattern_fade_in_R_3.setEnabled(con)
        self.lineEdit_pattern_fade_in_R_4.setEnabled(con)

        self.lineEdit_pattern_start_L_1.setEnabled(con)
        self.lineEdit_pattern_start_L_2.setEnabled(con)
        self.lineEdit_pattern_start_L_3.setEnabled(con)
        self.lineEdit_pattern_start_L_4.setEnabled(con)

        self.lineEdit_pattern_start_R_1.setEnabled(con)
        self.lineEdit_pattern_start_R_2.setEnabled(con)
        self.lineEdit_pattern_start_R_3.setEnabled(con)
        self.lineEdit_pattern_start_R_4.setEnabled(con)

    def set_changeBox_able_R(self):
        if self.checkBox_R_1.isChecked():
            self.checkBox_R_1.setEnabled(1)
        else:
            self.checkBox_R_2.setChecked(0)
            self.checkBox_R_2.setEnabled(0)

        if self.checkBox_R_2.isChecked():
            self.checkBox_R_2.setEnabled(1)
        else:
            self.checkBox_R_3.setChecked(0)
            self.checkBox_R_3.setEnabled(0)

        if self.checkBox_R_3.isChecked():
            self.checkBox_R_3.setEnabled(1)
        else:
            self.checkBox_R_4.setChecked(0)
            self.checkBox_R_4.setEnabled(0)

    # 选择是否修改时改变状态
    def set_change_able(self):
        if self.radioButton_1.isChecked():
            self.checkBox_L_1.setEnabled(1)
            self.checkBox_R_1.setEnabled(1)
            self.set_link_able_R()
            self.set_link_able_L()
            if str(self.lineEdit_pattern_index_L_1.text()) != '' and self.checkBox_L_1.isChecked():
                self.set_L_1_able_all(1)
            if str(self.lineEdit_pattern_index_L_2.text()) != '' and self.checkBox_L_2.isChecked():
                self.set_L_2_able_all(1)
            if str(self.lineEdit_pattern_index_L_3.text()) != '' and self.checkBox_L_3.isChecked():
                self.set_L_3_able_all(1)
            if str(self.lineEdit_pattern_index_L_4.text()) != '' and self.checkBox_L_4.isChecked():
                self.set_L_4_able_all(1)

            if str(self.lineEdit_pattern_index_R_1.text()) != '' and self.checkBox_R_1.isChecked():
                self.set_R_1_able_all(1)
            if str(self.lineEdit_pattern_index_R_2.text()) != '' and self.checkBox_R_2.isChecked():
                self.set_R_2_able_all(1)
            if str(self.lineEdit_pattern_index_R_3.text()) != '' and self.checkBox_R_3.isChecked():
                self.set_R_3_able_all(1)
            if str(self.lineEdit_pattern_index_R_4.text()) != '' and self.checkBox_R_4.isChecked():
                self.set_R_4_able_all(1)

        else:
            self.set_box_able(False)
            self.set_all_able(False)

    # 更新界面，数据状态
    def refresh(self, index_cur):

        global saveCon
        global rem_tmp
        saveCon = 0
        lineCur = dataGroup[index_cur]

        self.label_gloss.setText(str(lineCur[glossAlise]))
        self.label_gloss_index.setText(str(int(lineCur[indexAlise])))
        rem_tmp = lineCur[remarkAlise]
        def contUpdate():
            if str(lineCur[patterAlise_L_1]) != '':
                self.checkBox_L_1.setChecked(1)
                self.checkBox_L_1.setEnabled(1)
                self.lineEdit_pattern_index_L_1.setText(str(int(lineCur[patterAlise_L_1])))
                self.lineEdit_pattern_start_L_1.setText(str(int(lineCur[startAlise_L_1])))
                self.lineEdit_pattern_end_L_1.setText(str(int(lineCur[endAlise_L_1])))
                self.lineEdit_pattern_fade_in_L_1.setText(str(int(lineCur[fadeInAlise_L_1])))
                self.lineEdit_pattern_fade_out_L_1.setText(str(int(lineCur[fadeOutAlise_L_1])))
            else:
                self.checkBox_L_1.setChecked(0)
                self.lineEdit_pattern_index_L_1.setText('')
                self.lineEdit_pattern_start_L_1.setText('')
                self.lineEdit_pattern_end_L_1.setText('')
                self.lineEdit_pattern_fade_in_L_1.setText('')
                self.lineEdit_pattern_fade_out_L_1.setText('')
            self.set_L_1_able()

            if str(lineCur[patterAlise_L_2]) != '':
                self.checkBox_L_2.setChecked(1)
                self.checkBox_L_2.setEnabled(1)
                self.lineEdit_pattern_index_L_2.setText(str(int(lineCur[patterAlise_L_2])))
                self.lineEdit_pattern_start_L_2.setText(str(int(lineCur[startAlise_L_2])))
                self.lineEdit_pattern_end_L_2.setText(str(int(lineCur[endAlise_L_2])))
                self.lineEdit_pattern_fade_in_L_2.setText(str(int(lineCur[fadeInAlise_L_2])))
                self.lineEdit_pattern_fade_out_L_2.setText(str(int(lineCur[fadeOutAlise_L_2])))
            else:
                self.checkBox_L_2.setChecked(0)
                self.lineEdit_pattern_index_L_2.setText('')
                self.lineEdit_pattern_start_L_2.setText('')
                self.lineEdit_pattern_end_L_2.setText('')
                self.lineEdit_pattern_fade_in_L_2.setText('')
                self.lineEdit_pattern_fade_out_L_2.setText('')
            self.set_L_2_able()

            if str(lineCur[patterAlise_L_3]) != '':
                self.checkBox_L_3.setChecked(1)
                self.checkBox_L_3.setEnabled(1)
                self.lineEdit_pattern_index_L_3.setText(str(int(lineCur[patterAlise_L_3])))
                self.lineEdit_pattern_start_L_3.setText(str(int(lineCur[startAlise_L_3])))
                self.lineEdit_pattern_end_L_3.setText(str(int(lineCur[endAlise_L_3])))
                self.lineEdit_pattern_fade_in_L_3.setText(str(int(lineCur[fadeInAlise_L_3])))
                self.lineEdit_pattern_fade_out_L_3.setText(str(int(lineCur[fadeOutAlise_L_3])))
            else:
                self.checkBox_L_3.setChecked(0)
                self.lineEdit_pattern_index_L_3.setText('')
                self.lineEdit_pattern_start_L_3.setText('')
                self.lineEdit_pattern_end_L_3.setText('')
                self.lineEdit_pattern_fade_in_L_3.setText('')
                self.lineEdit_pattern_fade_out_L_3.setText('')
            self.set_L_3_able()

            if str(lineCur[patterAlise_L_4]) != '':
                self.checkBox_L_4.setChecked(1)
                self.checkBox_L_4.setEnabled(1)
                self.lineEdit_pattern_index_L_4.setText(str(int(lineCur[patterAlise_L_4])))
                self.lineEdit_pattern_start_L_4.setText(str(int(lineCur[startAlise_L_4])))
                self.lineEdit_pattern_end_L_4.setText(str(int(lineCur[endAlise_L_4])))
                self.lineEdit_pattern_fade_in_L_4.setText(str(int(lineCur[fadeInAlise_L_4])))
                self.lineEdit_pattern_fade_out_L_4.setText(str(int(lineCur[fadeOutAlise_L_4])))
            else:
                self.checkBox_L_4.setChecked(0)
                self.lineEdit_pattern_index_L_4.setText('')
                self.lineEdit_pattern_start_L_4.setText('')
                self.lineEdit_pattern_end_L_4.setText('')
                self.lineEdit_pattern_fade_in_L_4.setText('')
                self.lineEdit_pattern_fade_out_L_4.setText('')
            self.set_L_4_able()

            if str(lineCur[patterAlise_R_1]) != '':
                self.checkBox_R_1.setChecked(1)
                self.checkBox_R_1.setEnabled(1)
                self.lineEdit_pattern_index_R_1.setText(str(int(lineCur[patterAlise_R_1])))
                self.lineEdit_pattern_start_R_1.setText(str(int(lineCur[startAlise_R_1])))
                self.lineEdit_pattern_end_R_1.setText(str(int(lineCur[endAlise_R_1])))
                self.lineEdit_pattern_fade_in_R_1.setText(str(int(lineCur[fadeInAlise_R_1])))
                self.lineEdit_pattern_fade_out_R_1.setText(str(int(lineCur[fadeOutAlise_R_1])))
            else:
                self.checkBox_R_1.setChecked(0)
                self.lineEdit_pattern_index_R_1.setText('')
                self.lineEdit_pattern_start_R_1.setText('')
                self.lineEdit_pattern_end_R_1.setText('')
                self.lineEdit_pattern_fade_in_R_1.setText('')
                self.lineEdit_pattern_fade_out_R_1.setText('')
            self.set_R_1_able()

            if str(lineCur[patterAlise_R_2]) != '':
                self.checkBox_R_2.setChecked(1)
                self.checkBox_R_2.setEnabled(1)
                self.lineEdit_pattern_index_R_2.setText(str(int(lineCur[patterAlise_R_2])))
                self.lineEdit_pattern_start_R_2.setText(str(int(lineCur[startAlise_R_2])))
                self.lineEdit_pattern_end_R_2.setText(str(int(lineCur[endAlise_R_2])))
                self.lineEdit_pattern_fade_in_R_2.setText(str(int(lineCur[fadeInAlise_R_2])))
                self.lineEdit_pattern_fade_out_R_2.setText(str(int(lineCur[fadeOutAlise_R_2])))
            else:
                self.checkBox_R_2.setChecked(0)
                self.lineEdit_pattern_index_R_2.setText('')
                self.lineEdit_pattern_start_R_2.setText('')
                self.lineEdit_pattern_end_R_2.setText('')
                self.lineEdit_pattern_fade_in_R_2.setText('')
                self.lineEdit_pattern_fade_out_R_2.setText('')
            self.set_R_2_able()

            if str(lineCur[patterAlise_R_3]) != '':
                self.checkBox_R_3.setChecked(1)
                self.checkBox_R_3.setEnabled(1)
                self.lineEdit_pattern_index_R_3.setText(str(int(lineCur[patterAlise_R_3])))
                self.lineEdit_pattern_start_R_3.setText(str(int(lineCur[startAlise_R_3])))
                self.lineEdit_pattern_end_R_3.setText(str(int(lineCur[endAlise_R_3])))
                self.lineEdit_pattern_fade_in_R_3.setText(str(int(lineCur[fadeInAlise_R_3])))
                self.lineEdit_pattern_fade_out_R_3.setText(str(int(lineCur[fadeOutAlise_R_3])))
            else:
                self.checkBox_R_3.setChecked(0)
                self.lineEdit_pattern_index_R_3.setText('')
                self.lineEdit_pattern_start_R_3.setText('')
                self.lineEdit_pattern_end_R_3.setText('')
                self.lineEdit_pattern_fade_in_R_3.setText('')
                self.lineEdit_pattern_fade_out_R_3.setText('')
            self.set_R_3_able()

            if str(lineCur[patterAlise_R_4]) != '':
                self.checkBox_R_4.setChecked(1)
                self.checkBox_R_4.setEnabled(1)
                self.lineEdit_pattern_index_R_4.setText(str(int(lineCur[patterAlise_R_4])))
                self.lineEdit_pattern_start_R_4.setText(str(int(lineCur[startAlise_R_4])))
                self.lineEdit_pattern_end_R_4.setText(str(int(lineCur[endAlise_R_4])))
                self.lineEdit_pattern_fade_in_R_4.setText(str(int(lineCur[fadeInAlise_R_4])))
                self.lineEdit_pattern_fade_out_R_4.setText(str(int(lineCur[fadeOutAlise_R_4])))
            else:
                self.checkBox_R_4.setChecked(0)
                self.lineEdit_pattern_index_R_4.setText('')
                self.lineEdit_pattern_start_R_4.setText('')
                self.lineEdit_pattern_end_R_4.setText('')
                self.lineEdit_pattern_fade_in_R_4.setText('')
                self.lineEdit_pattern_fade_out_R_4.setText('')
            self.set_R_4_able()

        if str(lineCur[isCorrectAlise]) != '':
            if int(lineCur[isCorrectAlise] == 1):
                contUpdate()
                self.radioButton_1.setChecked(1)
                self.checkBox_R_1.setEnabled(1)
                self.checkBox_L_1.setEnabled(1)

            elif int(lineCur[isCorrectAlise] == 2):
                self.radioButton_2.setChecked(1)
                self.clearAll()
            elif int(lineCur[isCorrectAlise] == 3):
                self.radioButton_3.setChecked(1)
                self.clearAll()
            else:
                self.radioButton_4.setChecked(1)
                self.clearAll()
        else:
            self.radioButton_4.setChecked(1)
            self.clearAll()

    def load(self):
        qmessagebox = QMessageBox()

        if self.label_load_con.text() == '已导入':
            qmessagebox.warning(self, '警告', '文件已导入')
            return

        if self.lineEdit_operater.text() == '':
            qmessagebox.warning(self, '警告', '请输入操作员姓名')
            return

        # print(os.path.dirname(os.path.realpath(sys.executable)))
        filePathLoad = os.path.dirname(os.path.realpath(sys.executable))
        name = self.lineEdit_operater.text().strip()

        file = os.path.join(rootPath,
                            '词目动作原语模板分类标注工具_' + name + '.xls')
        # file = 'D:\pattern\动作修复 词目标注工具\词目动作原语模板标注工具 关键字段表格.xls'  # 文件路径
        try:
            wb = xlrd.open_workbook(filename=file)  # 用方法打开该文件路径下的文件
        except:
            qmessagebox.warning(self, '警告', '文件打开失败，请检查姓名、表格是否被占用')
            return
        ws = wb.sheet_by_name("Sheet1")  # 打开该表格里的表单

        for r in range(ws.nrows):  # 遍历行
            col = []
            for l in range(ws.ncols):  # 遍历列
                col.append(ws.cell(r, l).value)  # 将单元格中的值加入到列表中(r,l)相当于坐标系，cell（）为单元格，value为单元格的值
            dataBase.append(col)

        self.label_load_con.setText('已导入')

        for i in dataBase[0]:
            key_label.append(i)
            data_dict_oneLine[str(i)] = ''

        # print(data_dict_oneLine)
        for i in range(1, len(dataBase)):
            data_dict_line_tmp = data_dict_oneLine.copy()
            for j in range(len(key_label)):
                data_dict_line_tmp[key_label[j]] = dataBase[i][j]
            dataGroup.append(data_dict_line_tmp)

        index_cur = 0
        self.refresh(index_cur)

        def buttom_check():
            self.pushButton_save.setEnabled(1)
            self.pushButton_prev.setEnabled(1)
            self.pushButton_next.setEnabled(1)
            self.pushButton_video_res.setEnabled(1)
            self.pushButton_video_per.setEnabled(1)
            self.pushButton_output.setEnabled(1)
            self.pushButton_toIndex.setEnabled(1)
            self.pushButton_readme.setEnabled(1)
            self.pushButton_hint.setEnabled(1)

            self.radioButton_1.setEnabled(1)
            self.radioButton_2.setEnabled(1)
            self.radioButton_3.setEnabled(1)
            self.radioButton_4.setEnabled(1)

            self.lineEdit_operater.setEnabled(0)

        buttom_check()

        qmessagebox.about(self, '导入数据', '导入成功')

    def clearAll(self):
        self.set_box_able(0)
        self.set_all_able(0)
        self.set_box_check(0)
        self.lineEdit_pattern_index_L_1.setText('')
        self.lineEdit_pattern_start_L_1.setText('')
        self.lineEdit_pattern_end_L_1.setText('')
        self.lineEdit_pattern_fade_in_L_1.setText('')
        self.lineEdit_pattern_fade_out_L_1.setText('')

        self.lineEdit_pattern_index_L_2.setText('')
        self.lineEdit_pattern_start_L_2.setText('')
        self.lineEdit_pattern_end_L_2.setText('')
        self.lineEdit_pattern_fade_in_L_2.setText('')
        self.lineEdit_pattern_fade_out_L_2.setText('')

        self.lineEdit_pattern_index_L_3.setText('')
        self.lineEdit_pattern_start_L_3.setText('')
        self.lineEdit_pattern_end_L_3.setText('')
        self.lineEdit_pattern_fade_in_L_3.setText('')
        self.lineEdit_pattern_fade_out_L_3.setText('')

        self.lineEdit_pattern_index_L_4.setText('')
        self.lineEdit_pattern_start_L_4.setText('')
        self.lineEdit_pattern_end_L_4.setText('')
        self.lineEdit_pattern_fade_in_L_4.setText('')
        self.lineEdit_pattern_fade_out_L_4.setText('')

        self.lineEdit_pattern_index_R_1.setText('')
        self.lineEdit_pattern_start_R_1.setText('')
        self.lineEdit_pattern_end_R_1.setText('')
        self.lineEdit_pattern_fade_in_R_1.setText('')
        self.lineEdit_pattern_fade_out_R_1.setText('')

        self.lineEdit_pattern_index_R_2.setText('')
        self.lineEdit_pattern_start_R_2.setText('')
        self.lineEdit_pattern_end_R_2.setText('')
        self.lineEdit_pattern_fade_in_R_2.setText('')
        self.lineEdit_pattern_fade_out_R_2.setText('')

        self.lineEdit_pattern_index_R_3.setText('')
        self.lineEdit_pattern_start_R_3.setText('')
        self.lineEdit_pattern_end_R_3.setText('')
        self.lineEdit_pattern_fade_in_R_3.setText('')
        self.lineEdit_pattern_fade_out_R_3.setText('')

        self.lineEdit_pattern_index_R_4.setText('')
        self.lineEdit_pattern_start_R_4.setText('')
        self.lineEdit_pattern_end_R_4.setText('')
        self.lineEdit_pattern_fade_in_R_4.setText('')
        self.lineEdit_pattern_fade_out_R_4.setText('')

    def dataUpdate(self):
        qmessagebox = QMessageBox()
        # 添加操作者
        if self.lineEdit_operater.text() == '':
            qmessagebox.warning(self, '警告', '请输入操作者姓名')
            return
        else:
            dataGroup[index_cur][operatorAlise] = self.lineEdit_operater.text()

        def clear_and_load():
            self.clearAll()
            for i in key_label:
                if i in optional_label:
                    dataGroup[index_cur][i] = ''
                self.set_box_able(0)

        def allupdate():
            if self.checkBox_L_1.isChecked():
                dataGroup[index_cur][patterAlise_L_1] = float(self.lineEdit_pattern_index_L_1.text())
                dataGroup[index_cur][startAlise_L_1] = float(self.lineEdit_pattern_start_L_1.text())
                dataGroup[index_cur][endAlise_L_1] = float(self.lineEdit_pattern_end_L_1.text())
                dataGroup[index_cur][fadeInAlise_L_1] = float(self.lineEdit_pattern_fade_in_L_1.text())
                dataGroup[index_cur][fadeOutAlise_L_1] = float(self.lineEdit_pattern_fade_out_L_1.text())

            if self.checkBox_L_2.isChecked():
                dataGroup[index_cur][patterAlise_L_2] = float(self.lineEdit_pattern_index_L_2.text())
                dataGroup[index_cur][startAlise_L_2] = float(self.lineEdit_pattern_start_L_2.text())
                dataGroup[index_cur][endAlise_L_2] = float(self.lineEdit_pattern_end_L_2.text())
                dataGroup[index_cur][fadeInAlise_L_2] = float(self.lineEdit_pattern_fade_in_L_2.text())
                dataGroup[index_cur][fadeOutAlise_L_2] = float(self.lineEdit_pattern_fade_out_L_2.text())

            if self.checkBox_L_3.isChecked():
                dataGroup[index_cur][patterAlise_L_3] = float(self.lineEdit_pattern_index_L_3.text())
                dataGroup[index_cur][startAlise_L_3] = float(self.lineEdit_pattern_start_L_3.text())
                dataGroup[index_cur][endAlise_L_3] = float(self.lineEdit_pattern_end_L_3.text())
                dataGroup[index_cur][fadeInAlise_L_3] = float(self.lineEdit_pattern_fade_in_L_3.text())
                dataGroup[index_cur][fadeOutAlise_L_3] = float(self.lineEdit_pattern_fade_out_L_3.text())

            if self.checkBox_L_4.isChecked():
                dataGroup[index_cur][patterAlise_L_4] = float(self.lineEdit_pattern_index_L_4.text())
                dataGroup[index_cur][startAlise_L_4] = float(self.lineEdit_pattern_start_L_4.text())
                dataGroup[index_cur][endAlise_L_4] = float(self.lineEdit_pattern_end_L_4.text())
                dataGroup[index_cur][fadeInAlise_L_4] = float(self.lineEdit_pattern_fade_in_L_4.text())
                dataGroup[index_cur][fadeOutAlise_L_4] = float(self.lineEdit_pattern_fade_out_L_4.text())
            if self.checkBox_R_1.isChecked():
                dataGroup[index_cur][patterAlise_R_1] = float(self.lineEdit_pattern_index_R_1.text())
                dataGroup[index_cur][startAlise_R_1] = float(self.lineEdit_pattern_start_R_1.text())
                dataGroup[index_cur][endAlise_R_1] = float(self.lineEdit_pattern_end_R_1.text())
                dataGroup[index_cur][fadeInAlise_R_1] = float(self.lineEdit_pattern_fade_in_R_1.text())
                dataGroup[index_cur][fadeOutAlise_R_1] = float(self.lineEdit_pattern_fade_out_R_1.text())
            if self.checkBox_R_2.isChecked():
                dataGroup[index_cur][patterAlise_R_2] = float(self.lineEdit_pattern_index_R_2.text())
                dataGroup[index_cur][startAlise_R_2] = float(self.lineEdit_pattern_start_R_2.text())
                dataGroup[index_cur][endAlise_R_2] = float(self.lineEdit_pattern_end_R_2.text())
                dataGroup[index_cur][fadeInAlise_R_2] = float(self.lineEdit_pattern_fade_in_R_2.text())
                dataGroup[index_cur][fadeOutAlise_R_2] = float(self.lineEdit_pattern_fade_out_R_2.text())
            if self.checkBox_R_3.isChecked():
                dataGroup[index_cur][patterAlise_R_3] = float(self.lineEdit_pattern_index_R_3.text())
                dataGroup[index_cur][startAlise_R_3] = float(self.lineEdit_pattern_start_R_3.text())
                dataGroup[index_cur][endAlise_R_3] = float(self.lineEdit_pattern_end_R_3.text())
                dataGroup[index_cur][fadeInAlise_R_3] = float(self.lineEdit_pattern_fade_in_R_3.text())
                dataGroup[index_cur][fadeOutAlise_R_3] = float(self.lineEdit_pattern_fade_out_R_3.text())
            if self.checkBox_R_4.isChecked():
                dataGroup[index_cur][patterAlise_R_4] = float(self.lineEdit_pattern_index_R_4.text())
                dataGroup[index_cur][startAlise_R_4] = float(self.lineEdit_pattern_start_R_4.text())
                dataGroup[index_cur][endAlise_R_4] = float(self.lineEdit_pattern_end_R_4.text())
                dataGroup[index_cur][fadeInAlise_R_4] = float(self.lineEdit_pattern_fade_in_R_4.text())
                dataGroup[index_cur][fadeOutAlise_R_4] = float(self.lineEdit_pattern_fade_out_R_4.text())

        if self.radioButton_1.isChecked():
            dataGroup[index_cur][isCorrectAlise] = 1
            allupdate()
        elif self.radioButton_2.isChecked():
            dataGroup[index_cur][isCorrectAlise] = 2
            clear_and_load()
        elif self.radioButton_3.isChecked():
            dataGroup[index_cur][isCorrectAlise] = 3
            clear_and_load()

        dataGroup[index_cur][remarkAlise] = rem_tmp

        # 添加日期
        t = time.localtime()
        dataGroup[index_cur][dateAlise] = str(t.tm_mon) + '_' + str(t.tm_mday)



    def save(self):
        qmessagebox = QMessageBox()

        workbook = xlwt.Workbook(encoding='utf-8')
        ws = workbook.add_sheet("Sheet1")


        if not self.check_isnum_valid():
            return

        self.dataUpdate()

        # 检查需修改的情况下是否有动作信息
        if not self.check_isChecked():
            return

        if not self.check_frame_valid():
            return

        rows = len(dataBase)
        lines = len(dataBase[0])
        # print(rows)
        for i in range(rows):
            for j in range(lines):
                if i != 0:
                    dataBase[i][j] = dataGroup[i - 1][key_label[j]]
                ws.write(i, j, dataBase[i][j])
        try:
            name = self.lineEdit_operater.text().strip()

            file = os.path.join(rootPath,
                                '词目动作原语模板分类标注工具_' + name + '.xls')
            workbook.save(file)
        except:
            qmessagebox.warning(self, '警告', '文件保存失败,请检查姓名、日期、表格是否被占用')
            return
        # self.load()
        qmessagebox.about(self, '保存文件', '保存成功')

        self.label_save_condi.setText("文件已保存")
        global saveCon
        saveCon = 1

    def saveConti(self) -> bool:
        qmessagebox = QMessageBox()
        global saveCon
        if saveCon == 1:
            return True
        else:
            reply = QMessageBox.question(self, '警告', '数据未保存,是否继续', QMessageBox.Yes | QMessageBox.No)
            return reply == QMessageBox.Yes

    def check_isChecked(self) -> bool:
        qmessagebox = QMessageBox()
        if dataGroup[index_cur][isCorrectAlise] != '':
            if int(dataGroup[index_cur][isCorrectAlise]) == 1:
                haveChecked = self.checkBox_L_1.isChecked() + self.checkBox_R_1.isChecked()
                # print(haveChecked)
                if not haveChecked:
                    qmessagebox.warning(self, '警告', '请至少填入一个动作')
                    return False
        return True

    def check_isnum_valid(self) -> bool:
        qmessagebox = QMessageBox()
        if self.checkBox_L_1.isChecked():
            blankCon_L_1_isnum = [
                not self.lineEdit_pattern_index_L_1.text().isnumeric(),
                not self.lineEdit_pattern_fade_in_L_1.text().isnumeric(),
                not self.lineEdit_pattern_fade_out_L_1.text().isnumeric(),
                not self.lineEdit_pattern_start_L_1.text().isnumeric(),
                not self.lineEdit_pattern_end_L_1.text().isnumeric(),
            ]
            if sum(blankCon_L_1_isnum) != 0:
                qmessagebox.warning(self, '警告', '动作L1填写不规范')
                return False
        
        if self.checkBox_L_2.isChecked():
            blankCon_L_2_isnum = [
                not self.lineEdit_pattern_index_L_2.text().isnumeric(),
                not self.lineEdit_pattern_fade_in_L_2.text().isnumeric(),
                not self.lineEdit_pattern_fade_out_L_2.text().isnumeric(),
                not self.lineEdit_pattern_start_L_2.text().isnumeric(),
                not self.lineEdit_pattern_end_L_2.text().isnumeric(),
            ]
            if sum(blankCon_L_2_isnum) != 0:
                qmessagebox.warning(self, '警告', '动作L2填写不规范')
                return False
        
        if self.checkBox_L_3.isChecked():
            blankCon_L_3_isnum = [
                not self.lineEdit_pattern_index_L_3.text().isnumeric(),
                not self.lineEdit_pattern_fade_in_L_3.text().isnumeric(),
                not self.lineEdit_pattern_fade_out_L_3.text().isnumeric(),
                not self.lineEdit_pattern_start_L_3.text().isnumeric(),
                not self.lineEdit_pattern_end_L_3.text().isnumeric(),
            ]
            if sum(blankCon_L_3_isnum) != 0:
                qmessagebox.warning(self, '警告', '动作L3填写不规范')
                return False
        
        if self.checkBox_L_4.isChecked():
            blankCon_L_4_isnum = [
                not self.lineEdit_pattern_index_L_4.text().isnumeric(),
                not self.lineEdit_pattern_fade_in_L_4.text().isnumeric(),
                not self.lineEdit_pattern_fade_out_L_4.text().isnumeric(),
                not self.lineEdit_pattern_start_L_4.text().isnumeric(),
                not self.lineEdit_pattern_end_L_4.text().isnumeric(),
            ]
            if sum(blankCon_L_4_isnum) != 0:
                qmessagebox.warning(self, '警告', '动作L4填写不规范')
                return False
        
        if self.checkBox_R_1.isChecked():
            blankCon_R_1_isnum = [
                not self.lineEdit_pattern_index_R_1.text().isnumeric(),
                not self.lineEdit_pattern_fade_in_R_1.text().isnumeric(),
                not self.lineEdit_pattern_fade_out_R_1.text().isnumeric(),
                not self.lineEdit_pattern_start_R_1.text().isnumeric(),
                not self.lineEdit_pattern_end_R_1.text().isnumeric(),
            ]
            if sum(blankCon_R_1_isnum) != 0:
                qmessagebox.warning(self, '警告', '动作R1填写不规范')
                return False

        if self.checkBox_R_2.isChecked():
            blankCon_R_2_isnum = [
                not self.lineEdit_pattern_index_R_2.text().isnumeric(),
                not self.lineEdit_pattern_fade_in_R_2.text().isnumeric(),
                not self.lineEdit_pattern_fade_out_R_2.text().isnumeric(),
                not self.lineEdit_pattern_start_R_2.text().isnumeric(),
                not self.lineEdit_pattern_end_R_2.text().isnumeric(),
            ]
            if sum(blankCon_R_2_isnum) != 0:
                qmessagebox.warning(self, '警告', '动作R2填写不规范')
                return False

        if self.checkBox_R_3.isChecked():
            blankCon_R_3_isnum = [
                not self.lineEdit_pattern_index_R_3.text().isnumeric(),
                not self.lineEdit_pattern_fade_in_R_3.text().isnumeric(),
                not self.lineEdit_pattern_fade_out_R_3.text().isnumeric(),
                not self.lineEdit_pattern_start_R_3.text().isnumeric(),
                not self.lineEdit_pattern_end_R_3.text().isnumeric(),
            ]
            if sum(blankCon_R_3_isnum) != 0:
                qmessagebox.warning(self, '警告', '动作R3填写不规范')
                return False

        if self.checkBox_R_4.isChecked():
            blankCon_R_4_isnum = [
                not self.lineEdit_pattern_index_R_4.text().isnumeric(),
                not self.lineEdit_pattern_fade_in_R_4.text().isnumeric(),
                not self.lineEdit_pattern_fade_out_R_4.text().isnumeric(),
                not self.lineEdit_pattern_start_R_4.text().isnumeric(),
                not self.lineEdit_pattern_end_R_4.text().isnumeric(),
            ]
            if sum(blankCon_R_4_isnum) != 0:
                qmessagebox.warning(self, '警告', '动作R4填写不规范')
                return False
        return True

    def check_frame_valid(self) -> bool:
        qmessagebox = QMessageBox()

        if self.checkBox_L_1.isChecked():

            blankCon_L_1_frame_valid = [
                int(self.lineEdit_pattern_index_L_1.text()) < 1,
                int(self.lineEdit_pattern_index_L_1.text()) > 61,
                int(self.lineEdit_pattern_fade_in_L_1.text()) < 0,
                int(self.lineEdit_pattern_start_L_1.text()) <= int(self.lineEdit_pattern_fade_in_L_1.text()),
                int(self.lineEdit_pattern_end_L_1.text()) <= int(self.lineEdit_pattern_start_L_1.text()),
                int(self.lineEdit_pattern_fade_out_L_1.text()) <= int(self.lineEdit_pattern_end_L_1.text()),
                int(self.lineEdit_pattern_fade_out_L_1.text()) > dataGroup[index_cur][max_frameAlise]
            ]

            if sum(blankCon_L_1_frame_valid) != 0:
                qmessagebox.warning(self, '警告', '动作L1帧数设置有误')
                return False
        if self.checkBox_L_2.isChecked():
            blankCon_L_2_frame_valid = [
                int(self.lineEdit_pattern_index_L_2.text()) < 1,
                int(self.lineEdit_pattern_index_L_2.text()) > 61,
                int(self.lineEdit_pattern_fade_in_L_2.text()) < 0,
                int(self.lineEdit_pattern_start_L_2.text()) <= int(self.lineEdit_pattern_fade_in_L_2.text()),
                int(self.lineEdit_pattern_end_L_2.text()) <= int(self.lineEdit_pattern_start_L_2.text()),
                int(self.lineEdit_pattern_fade_out_L_2.text()) <= int(self.lineEdit_pattern_end_L_2.text()),
                int(self.lineEdit_pattern_fade_out_L_2.text()) > dataGroup[index_cur][max_frameAlise]
            ]
            if sum(blankCon_L_2_frame_valid) != 0:
                qmessagebox.warning(self, '警告', '动作L2帧数设置有误')
                return False

            if int(self.lineEdit_pattern_fade_in_L_2.text()) <= int(self.lineEdit_pattern_fade_out_L_1.text()):
                qmessagebox.warning(self, '警告', '动作L1，L2帧数设置有误')
                return False
        if self.checkBox_L_3.isChecked():
            blankCon_L_3_frame_valid = [
                int(self.lineEdit_pattern_index_L_3.text()) < 1,
                int(self.lineEdit_pattern_index_L_3.text()) > 61,
                int(self.lineEdit_pattern_fade_in_L_3.text()) < 0,
                int(self.lineEdit_pattern_start_L_3.text()) <= int(self.lineEdit_pattern_fade_in_L_3.text()),
                int(self.lineEdit_pattern_end_L_3.text()) <= int(self.lineEdit_pattern_start_L_3.text()),
                int(self.lineEdit_pattern_fade_out_L_3.text()) <= int(self.lineEdit_pattern_end_L_3.text()),
                int(self.lineEdit_pattern_fade_out_L_3.text()) > dataGroup[index_cur][max_frameAlise]
            ]
            if sum(blankCon_L_3_frame_valid) != 0:
                qmessagebox.warning(self, '警告', '动作L3帧数设置有误')
                return False
            if int(self.lineEdit_pattern_fade_in_L_3.text()) <= int(self.lineEdit_pattern_fade_out_L_2.text()):
                qmessagebox.warning(self, '警告', '动作L2，L3帧数设置有误')
                return False
        if self.checkBox_L_4.isChecked():
            blankCon_L_4_frame_valid = [
                int(self.lineEdit_pattern_index_L_4.text()) < 1,
                int(self.lineEdit_pattern_index_L_4.text()) > 61,
                int(self.lineEdit_pattern_fade_in_L_4.text()) < 0,
                int(self.lineEdit_pattern_start_L_4.text()) <= int(self.lineEdit_pattern_fade_in_L_4.text()),
                int(self.lineEdit_pattern_end_L_4.text()) <= int(self.lineEdit_pattern_start_L_4.text()),
                int(self.lineEdit_pattern_fade_out_L_4.text()) <= int(self.lineEdit_pattern_end_L_4.text()),
                int(self.lineEdit_pattern_fade_out_L_4.text()) > dataGroup[index_cur][max_frameAlise]
            ]
            if sum(blankCon_L_4_frame_valid) != 0:
                qmessagebox.warning(self, '警告', '动作L4帧数设置有误')
                return False
            if int(self.lineEdit_pattern_fade_in_L_4.text()) <= int(self.lineEdit_pattern_fade_out_L_3.text()):
                qmessagebox.warning(self, '警告', '动作L3，L4帧数设置有误')
                return False
        if self.checkBox_R_1.isChecked():
            blankCon_R_1_frame_valid = [
                int(self.lineEdit_pattern_index_R_1.text()) < 1,
                int(self.lineEdit_pattern_index_R_1.text()) > 61,
                int(self.lineEdit_pattern_fade_in_R_1.text()) < 0,
                int(self.lineEdit_pattern_start_R_1.text()) <= int(self.lineEdit_pattern_fade_in_R_1.text()),
                int(self.lineEdit_pattern_end_R_1.text()) <= int(self.lineEdit_pattern_start_R_1.text()),
                int(self.lineEdit_pattern_fade_out_R_1.text()) <= int(self.lineEdit_pattern_end_R_1.text()),
                int(self.lineEdit_pattern_fade_out_R_1.text()) > dataGroup[index_cur][max_frameAlise]
            ]

            if sum(blankCon_R_1_frame_valid) != 0:
                qmessagebox.warning(self, '警告', '动作R1帧数设置有误')
                return False


        if self.checkBox_R_2.isChecked():
            blankCon_R_2_frame_valid = [
                int(self.lineEdit_pattern_index_R_2.text()) < 1,
                int(self.lineEdit_pattern_index_R_2.text()) > 61,
                int(self.lineEdit_pattern_fade_in_R_2.text()) < 0,
                int(self.lineEdit_pattern_start_R_2.text()) <= int(self.lineEdit_pattern_fade_in_R_2.text()),
                int(self.lineEdit_pattern_end_R_2.text()) <= int(self.lineEdit_pattern_start_R_2.text()),
                int(self.lineEdit_pattern_fade_out_R_2.text()) <= int(self.lineEdit_pattern_end_R_2.text()),
                int(self.lineEdit_pattern_fade_out_R_2.text()) > dataGroup[index_cur][max_frameAlise]
            ]
            if sum(blankCon_R_2_frame_valid) != 0:
                qmessagebox.warning(self, '警告', '动作R2帧数设置有误')
                return False
            if int(self.lineEdit_pattern_fade_in_R_2.text()) <= int(self.lineEdit_pattern_fade_out_R_1.text()):
                qmessagebox.warning(self, '警告', '动作R1，R2帧数设置有误')
                return False
        if self.checkBox_R_3.isChecked():
            blankCon_R_3_frame_valid = [
                int(self.lineEdit_pattern_index_R_3.text()) < 1,
                int(self.lineEdit_pattern_index_R_3.text()) > 61,
                int(self.lineEdit_pattern_fade_in_R_3.text()) < 0,
                int(self.lineEdit_pattern_start_R_3.text()) <= int(self.lineEdit_pattern_fade_in_R_3.text()),
                int(self.lineEdit_pattern_end_R_3.text()) <= int(self.lineEdit_pattern_start_R_3.text()),
                int(self.lineEdit_pattern_fade_out_R_3.text()) <= int(self.lineEdit_pattern_end_R_3.text()),
                int(self.lineEdit_pattern_fade_out_R_3.text()) > dataGroup[index_cur][max_frameAlise]
            ]
            if sum(blankCon_R_3_frame_valid) != 0:
                qmessagebox.warning(self, '警告', '动作R3帧数设置有误')
                return False
            if int(self.lineEdit_pattern_fade_in_R_3.text()) <= int(self.lineEdit_pattern_fade_out_R_2.text()):
                qmessagebox.warning(self, '警告', '动作R2，R3帧数设置有误')
                return False
        if self.checkBox_R_4.isChecked():
            blankCon_R_4_frame_valid = [
                int(self.lineEdit_pattern_index_R_4.text()) < 1,
                int(self.lineEdit_pattern_index_R_4.text()) > 61,
                int(self.lineEdit_pattern_fade_in_R_4.text()) < 0,
                int(self.lineEdit_pattern_start_R_4.text()) <= int(self.lineEdit_pattern_fade_in_R_4.text()),
                int(self.lineEdit_pattern_end_R_4.text()) <= int(self.lineEdit_pattern_start_R_4.text()),
                int(self.lineEdit_pattern_fade_out_R_4.text()) <= int(self.lineEdit_pattern_end_R_4.text()),
                int(self.lineEdit_pattern_fade_out_R_4.text()) > dataGroup[index_cur][max_frameAlise]
            ]
            if sum(blankCon_R_4_frame_valid) != 0:
                qmessagebox.warning(self, '警告', '动作R4帧数设置有误')
                return False
            if int(self.lineEdit_pattern_fade_in_R_4.text()) <= int(self.lineEdit_pattern_fade_out_R_3.text()):
                qmessagebox.warning(self, '警告', '动作R3，R4帧数设置有误')
                return False

        return True

    def glossNext(self):
        qmessagebox = QMessageBox()
        if not self.saveConti():
            return
        global index_cur
        if index_cur + 1 >= len(dataGroup):
            qmessagebox.warning(self, '警告', '没有下一个词')
            return
        index_cur += 1

        self.refresh(index_cur)

    def glossprev(self):
        qmessagebox = QMessageBox()
        if not self.saveConti():
            return
        global index_cur
        if index_cur == 0:
            qmessagebox.warning(self, '警告', '没有上一个词')
            return
        index_cur -= 1

        self.refresh(index_cur)

    def toIndex(self):
        global index_cur
        qmessagebox = QMessageBox()
        index_tmp = self.lineEdit_to_index.text()

        if not index_tmp.isnumeric():
            qmessagebox.warning(self, '警告', '请输入数字编号')
            return
        if int(index_tmp) > len(dataGroup) or int(index_tmp) < 1:
            qmessagebox.warning(self, '警告', '超出序列范围')
            return

        if not self.saveConti():
            return
        index_cur = int(index_tmp) - 1

        self.refresh(index_cur)

    def checkCon(self):
        qmessagebox = QMessageBox()
        if self.radioButton_1.isChecked() + self.radioButton_2.isChecked() + self.radioButton_3.isChecked() == 0:
            qmessagebox.warning(self, '警告', '请至少选择一项处理意见')
            return 0
        return 1

    def open_video_res(self):
        qmessagebox = QMessageBox()
        class Video(object):
            def __init__(self, path):
                self.path = path

            def play(self):
                from os import startfile
                startfile(self.path, "open")

        class Movie_MP4(Video):
            type = 'MP4'  # 此处以MP4格式为例

        # (rootPath)
        if '.mp4' in dataGroup[index_cur][videoAlise_res]:
            moviePath = os.path.join(rootPath, 'sourrcevideo', dataGroup[index_cur][videoAlise_res])
        else:
            moviePath = os.path.join(rootPath, 'sourrcevideo', dataGroup[index_cur][videoAlise_res] + '.mp4')
        # print(rootPath)
        # movie = Movie_MP4(r'E:\之江\pattern\sourrcevideo\00000001.mp4')
        try:
            movie = Movie_MP4(moviePath)
            movie.play()
        except:
            qmessagebox.warning(self, '警告', '视频打开失败')
            return

    def open_video_pre(self):
        qmessagebox = QMessageBox()
        class Video(object):
            def __init__(self, path):
                self.path = path

            def play(self):
                from os import startfile
                startfile(self.path, "open")

        class Movie_AVI(Video):
            type = 'AVI'  # 此处以MP4格式为例

        def addZero(s: int) -> str:
            res = str(s)
            for _ in range(8 - len(str(s))):
                res = '0' + res
            return res
        if '.avi' in dataGroup[index_cur][videoAlise_per]:
            moviePath = os.path.join(rootPath, 'performancevideo', dataGroup[index_cur][videoAlise_per])
        else:
            moviePath = os.path.join(rootPath, 'performancevideo', dataGroup[index_cur][videoAlise_per] + '.avi')
        # print(moviePath)
        # movie = Movie_MP4(r'E:\之江\pattern\sourrcevideo\00000001.mp4')
        try:
            movie = Movie_AVI(moviePath)
            movie.play()
        except:
            qmessagebox.warning(self, '警告', '视频打开失败')
            return

    def set_link_able_L(self):
        if self.checkBox_L_1.isChecked():
            self.checkBox_L_2.setEnabled(1)
            # self.set_L_2_able_all(1)
        else:
            self.checkBox_L_2.setChecked(0)
            self.checkBox_L_2.setEnabled(0)
            self.set_L_2_able_all(0)
        if self.checkBox_L_2.isChecked():
            # self.set_L_3_able_all(1)
            self.checkBox_L_3.setEnabled(1)
        else:
            self.checkBox_L_3.setChecked(0)
            self.checkBox_L_3.setEnabled(0)
            self.set_L_3_able_all(0)

        if self.checkBox_L_3.isChecked():
            self.checkBox_L_4.setEnabled(1)
            # self.set_L_4_able_all(1)
        else:
            self.checkBox_L_4.setChecked(0)
            self.checkBox_L_4.setEnabled(0)
            self.set_L_4_able_all(0)

    def set_L_1_able_all(self, con: bool):
        self.lineEdit_pattern_index_L_1.setEnabled(con)
        self.lineEdit_pattern_fade_in_L_1.setEnabled(con)
        self.lineEdit_pattern_end_L_1.setEnabled(con)
        self.lineEdit_pattern_fade_out_L_1.setEnabled(con)
        self.lineEdit_pattern_start_L_1.setEnabled(con)

    def set_L_1_able(self):
        if self.checkBox_L_1.isChecked():
            self.set_L_1_able_all(True)
        else:
            self.set_L_1_able_all(False)
        self.set_link_able_L()

    def set_L_2_able_all(self, con: bool):
        self.lineEdit_pattern_index_L_2.setEnabled(con)
        self.lineEdit_pattern_fade_in_L_2.setEnabled(con)
        self.lineEdit_pattern_end_L_2.setEnabled(con)
        self.lineEdit_pattern_fade_out_L_2.setEnabled(con)
        self.lineEdit_pattern_start_L_2.setEnabled(con)

    def set_L_2_able(self):
        if self.checkBox_L_2.isChecked():
            self.set_L_2_able_all(True)
        else:
            self.set_L_2_able_all(False)
        self.set_link_able_L()

    def set_L_3_able_all(self, con: bool):
        self.lineEdit_pattern_index_L_3.setEnabled(con)
        self.lineEdit_pattern_fade_in_L_3.setEnabled(con)
        self.lineEdit_pattern_end_L_3.setEnabled(con)
        self.lineEdit_pattern_fade_out_L_3.setEnabled(con)
        self.lineEdit_pattern_start_L_3.setEnabled(con)

    def set_L_3_able(self):
        if self.checkBox_L_3.isChecked():
            self.set_L_3_able_all(True)
        else:
            self.set_L_3_able_all(False)
        self.set_link_able_L()

    def set_L_4_able_all(self, con: bool):
        self.lineEdit_pattern_index_L_4.setEnabled(con)
        self.lineEdit_pattern_fade_in_L_4.setEnabled(con)
        self.lineEdit_pattern_end_L_4.setEnabled(con)
        self.lineEdit_pattern_fade_out_L_4.setEnabled(con)
        self.lineEdit_pattern_start_L_4.setEnabled(con)

    def set_L_4_able(self):
        if self.checkBox_L_4.isChecked():
            self.set_L_4_able_all(True)
        else:
            self.set_L_4_able_all(False)

        self.set_link_able_L()

    def set_link_able_R(self):
        if self.checkBox_R_1.isChecked():
            self.checkBox_R_2.setEnabled(1)
        else:
            self.checkBox_R_2.setChecked(0)
            self.checkBox_R_2.setEnabled(0)
            self.set_R_2_able_all(0)
        if self.checkBox_R_2.isChecked():
            # self.set_R_3_able_all(1)
            self.checkBox_R_3.setEnabled(1)
        else:
            self.checkBox_R_3.setChecked(0)
            self.checkBox_R_3.setEnabled(0)
            self.set_R_3_able_all(0)

        if self.checkBox_R_3.isChecked():
            self.checkBox_R_4.setEnabled(1)
            # self.set_R_4_able_all(1)
        else:
            self.checkBox_R_4.setChecked(0)
            self.checkBox_R_4.setEnabled(0)
            self.set_R_4_able_all(0)

    def set_R_1_able_all(self, con: bool):
        self.lineEdit_pattern_index_R_1.setEnabled(con)
        self.lineEdit_pattern_fade_in_R_1.setEnabled(con)
        self.lineEdit_pattern_end_R_1.setEnabled(con)
        self.lineEdit_pattern_fade_out_R_1.setEnabled(con)
        self.lineEdit_pattern_start_R_1.setEnabled(con)

    def set_R_1_able(self):
        if self.checkBox_R_1.isChecked():
            self.set_R_1_able_all(True)
        else:

            self.set_R_1_able_all(False)

        self.set_link_able_R()

    def set_R_2_able_all(self, con: bool):
        self.lineEdit_pattern_index_R_2.setEnabled(con)
        self.lineEdit_pattern_fade_in_R_2.setEnabled(con)
        self.lineEdit_pattern_end_R_2.setEnabled(con)
        self.lineEdit_pattern_fade_out_R_2.setEnabled(con)
        self.lineEdit_pattern_start_R_2.setEnabled(con)

    def set_R_2_able(self):
        if self.checkBox_R_2.isChecked():
            self.set_R_2_able_all(True)
        else:
            self.set_R_2_able_all(False)

        self.set_link_able_R()

    def set_R_3_able_all(self, con: bool):
        self.lineEdit_pattern_index_R_3.setEnabled(con)
        self.lineEdit_pattern_fade_in_R_3.setEnabled(con)
        self.lineEdit_pattern_end_R_3.setEnabled(con)
        self.lineEdit_pattern_fade_out_R_3.setEnabled(con)
        self.lineEdit_pattern_start_R_3.setEnabled(con)

    def set_R_3_able(self):
        if self.checkBox_R_3.isChecked():
            self.set_R_3_able_all(True)
        else:
            self.set_R_3_able_all(False)

        self.set_link_able_R()

    def set_R_4_able_all(self, con: bool):
        self.lineEdit_pattern_index_R_4.setEnabled(con)
        self.lineEdit_pattern_fade_in_R_4.setEnabled(con)
        self.lineEdit_pattern_end_R_4.setEnabled(con)
        self.lineEdit_pattern_fade_out_R_4.setEnabled(con)
        self.lineEdit_pattern_start_R_4.setEnabled(con)

    def set_R_4_able(self):
        if self.checkBox_R_4.isChecked():
            self.set_R_4_able_all(True)
        else:
            self.set_R_4_able_all(False)

        self.set_link_able_R()

    def saveCondiChange(self):
        saveCon = 0
        self.label_save_condi.setText('未保存')

    def readme(self):
        self.dia = DialogWindow()
        self.dia.showDialog()

    def output(self):
        qmessagebox = QMessageBox()
        if saveCon == 0:
            qmessagebox.warning(self, '警告', '请先保存当前数据')
            return
        else:
            workbook = xlwt.Workbook(encoding='utf-8')
            ws = workbook.add_sheet("Sheet1")

            rows = len(dataBase)
            lines = len(dataBase[0])
            # print(rows)
            for i in range(rows):
                for j in range(lines):
                    if i != 0:
                        dataBase[i][j] = dataGroup[i - 1][key_label[j]]
                    ws.write(i, j, dataBase[i][j])
            try:
                t = time.localtime()
                file = os.path.join(rootPath,
                                    '词目动作原语模板分类标注工具' + '_' + self.lineEdit_operater.text() + '_' + str(t.tm_mon) + '_' + str(t.tm_mday) + '.xls')
                workbook.save(file)
            except:
                qmessagebox.warning(self, '警告', '文件保存失败,请检查姓名、日期、表格是否被占用')
                return
            # self.load()
            qmessagebox.about(self, '输出文件', '输出成功')

    def hint(self):
        self.hin = HintWindow()
        self.hin.showDialog()


if __name__ == '__main__':
    # dataBase_csv = csv.reader(open(r'D:\UI\word_box\data\data_w_rep.csv', 'r'))
    QApplication.setHighDpiScaleFactorRoundingPolicy(Qt.HighDpiScaleFactorRoundingPolicy.PassThrough)
    app = QApplication(sys.argv)
    myWindow = MyWindow()
    myWindow.show()

    sys.exit(app.exec_())