# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QMessageBox, QCompleter, QButtonGroup, QDialog
import sys
from PyQt5.QtCore import Qt
from window import Ui_MainWindow
import xlrd
import xlwt
from pprint import pprint  # pprint的输出形式为一行输出一个结果，下一个结果换行输出。实质上pprint输出的结果更为完整
import json
import pandas as pd
import os
from os import startfile
import csv
dataBase = []
key_label = []
data_dict_oneLine = {}
dataGroup = []
saveCon = 0
index_cur = 0
from Alise import *
'''indexAlise = 'index（词目序号）'
glossAlise = 'combine（词目）'
isCorrectAlise = 'IsCorrect（值0，1，2，3）'
patterAlise_L_1 = 'L_handshape_1'
fadeInAlise_L_1 = 'L_fade_in_F_1'
startAlise_L_1 = 'L_start_F_1'
endAlise_L_1 = 'L_end_F_1'
fadeOutAlise_L_1 = 'L_fade_out_1' '''

class MyWindow(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.set_all_able(False)
        self.set_box_able(False)
        self.pushButton_next.clicked.connect(self.glossNext)
        self.pushButton_prev.clicked.connect(self.glossprev)
        self.pushButton_toIndex.clicked.connect(self.toIndex)
        self.pushButton_load.clicked.connect(self.load)
        self.pushButton_save.clicked.connect(self.save)
        self.pushButton_video_res.clicked.connect(self.open_video_res)

        self.radioButton_1.clicked.connect(self.set_change_able)
        self.radioButton_2.clicked.connect(self.set_change_able)
        self.radioButton_3.clicked.connect(self.set_change_able)

        self.checkBox_L_1.clicked.connect(self.set_L_1_able)
        self.checkBox_L_2.clicked.connect(self.set_L_2_able)
        self.checkBox_L_3.clicked.connect(self.set_L_3_able)
        self.checkBox_L_4.clicked.connect(self.set_L_4_able)

        self.checkBox_R_1.clicked.connect(self.set_R_1_able)
        self.checkBox_R_2.clicked.connect(self.set_R_2_able)
        self.checkBox_R_3.clicked.connect(self.set_R_3_able)
        self.checkBox_R_4.clicked.connect(self.set_R_4_able)

    def set_box_able(self, con:bool):
        self.checkBox_L_1.setEnabled(con)
        self.checkBox_L_2.setEnabled(con)
        self.checkBox_L_3.setEnabled(con)
        self.checkBox_L_4.setEnabled(con)

        self.checkBox_R_1.setEnabled(con)
        self.checkBox_R_2.setEnabled(con)
        self.checkBox_R_3.setEnabled(con)
        self.checkBox_R_4.setEnabled(con)

    def set_all_able(self, con: bool):
        self.lineEdit_pattern_index_L_1.setEnabled(con)
        self.lineEdit_pattern_index_L_2.setEnabled(con)
        self.lineEdit_pattern_index_L_3.setEnabled(con)
        self.lineEdit_pattern_index_L_4.setEnabled(con)

        self.lineEdit_pattern_index_R_1.setEnabled(con)
        self.lineEdit_pattern_index_R_2.setEnabled(con)
        self.lineEdit_pattern_index_R_3.setEnabled(con)
        self.lineEdit_pattern_index_R_4.setEnabled(con)

        self.lineEdit_pattern_end_L_1.setEnabled(con)
        self.lineEdit_pattern_end_L_2.setEnabled(con)
        self.lineEdit_pattern_end_L_3.setEnabled(con)
        self.lineEdit_pattern_end_L_4.setEnabled(con)

        self.lineEdit_pattern_end_R_1.setEnabled(con)
        self.lineEdit_pattern_end_R_2.setEnabled(con)
        self.lineEdit_pattern_end_R_3.setEnabled(con)
        self.lineEdit_pattern_end_R_4.setEnabled(con)

        self.lineEdit_pattern_fade_out_L_1.setEnabled(con)
        self.lineEdit_pattern_fade_out_L_2.setEnabled(con)
        self.lineEdit_pattern_fade_out_L_3.setEnabled(con)
        self.lineEdit_pattern_fade_out_L_4.setEnabled(con)

        self.lineEdit_pattern_fade_out_R_1.setEnabled(con)
        self.lineEdit_pattern_fade_out_R_2.setEnabled(con)
        self.lineEdit_pattern_fade_out_R_3.setEnabled(con)
        self.lineEdit_pattern_fade_out_R_4.setEnabled(con)

        self.lineEdit_pattern_fade_in_L_1.setEnabled(con)
        self.lineEdit_pattern_fade_in_L_2.setEnabled(con)
        self.lineEdit_pattern_fade_in_L_3.setEnabled(con)
        self.lineEdit_pattern_fade_in_L_4.setEnabled(con)

        self.lineEdit_pattern_fade_in_R_1.setEnabled(con)
        self.lineEdit_pattern_fade_in_R_2.setEnabled(con)
        self.lineEdit_pattern_fade_in_R_3.setEnabled(con)
        self.lineEdit_pattern_fade_in_R_4.setEnabled(con)

        self.lineEdit_pattern_start_L_1.setEnabled(con)
        self.lineEdit_pattern_start_L_2.setEnabled(con)
        self.lineEdit_pattern_start_L_3.setEnabled(con)
        self.lineEdit_pattern_start_L_4.setEnabled(con)

        self.lineEdit_pattern_start_R_1.setEnabled(con)
        self.lineEdit_pattern_start_R_2.setEnabled(con)
        self.lineEdit_pattern_start_R_3.setEnabled(con)
        self.lineEdit_pattern_start_R_4.setEnabled(con)



    def set_changeBox_able_R(self):
        if self.checkBox_R_1.isChecked():
            self.checkBox_R_1.setEnabled(1)
        else:
            self.checkBox_R_2.setChecked(0)
            self.checkBox_R_2.setEnabled(0)

        if self.checkBox_R_2.isChecked():
            self.checkBox_R_2.setEnabled(1)
        else:
            self.checkBox_R_3.setChecked(0)
            self.checkBox_R_3.setEnabled(0)

        if self.checkBox_R_3.isChecked():
            self.checkBox_R_3.setEnabled(1)
        else:
            self.checkBox_R_4.setChecked(0)
            self.checkBox_R_4.setEnabled(0)

    def set_change_able(self):
        if self.radioButton_1.isChecked():
            self.checkBox_L_1.setEnabled(1)
            self.checkBox_R_1.setEnabled(1)
            self.set_link_able_R()
            self.set_link_able_L()
            if str(self.lineEdit_pattern_index_L_1.text()) != '' and self.checkBox_L_1.isChecked():
                self.set_L_1_able_all(1)
            if str(self.lineEdit_pattern_index_L_2.text()) != '' and self.checkBox_L_2.isChecked():
                self.set_L_2_able_all(1)
            if str(self.lineEdit_pattern_index_L_3.text()) != '' and self.checkBox_L_3.isChecked():
                self.set_L_3_able_all(1)
            if str(self.lineEdit_pattern_index_L_4.text()) != '' and self.checkBox_L_4.isChecked():
                self.set_L_4_able_all(1)
                
            if str(self.lineEdit_pattern_index_R_1.text()) != '' and self.checkBox_R_1.isChecked():
                self.set_R_1_able_all(1)
            if str(self.lineEdit_pattern_index_R_2.text()) != '' and self.checkBox_R_2.isChecked():
                self.set_R_2_able_all(1)
            if str(self.lineEdit_pattern_index_R_3.text()) != '' and self.checkBox_R_3.isChecked():
                self.set_R_3_able_all(1)
            if str(self.lineEdit_pattern_index_R_4.text()) != '' and self.checkBox_R_4.isChecked():
                self.set_R_4_able_all(1)
                
        else:
            self.set_box_able(False)
            self.set_all_able(False)

    def refresh(self, index_cur):
        print(dataGroup[index_cur])
        lineCur = dataGroup[index_cur]
        self.label_gloss.setText(str(lineCur[glossAlise]))
        self.label_gloss_index.setText(str(int(lineCur[indexAlise])))
        print(type(lineCur[isCorrectAlise]))
        if str(lineCur[isCorrectAlise]) != '':
            if int(lineCur[isCorrectAlise] == 1):
                self.radioButton_1.setChecked(1)
            elif int(lineCur[isCorrectAlise] == 2):
                self.radioButton_2.setChecked(1)
            elif int(lineCur[isCorrectAlise] == 3):
                self.radioButton_3.setChecked(1)

        if str(lineCur[patterAlise_L_1]) != '':
            self.checkBox_L_1.setChecked(1)
            self.checkBox_L_1.setEnabled(1)
            self.set_L_1_able()
            self.lineEdit_pattern_index_L_1.setText(str(int(lineCur[patterAlise_L_1])))
            self.lineEdit_pattern_start_L_1.setText(str(int(lineCur[startAlise_L_1])))
            self.lineEdit_pattern_end_L_1.setText(str(int(lineCur[endAlise_L_1])))
            self.lineEdit_pattern_fade_in_L_1.setText(str(int(lineCur[fadeInAlise_L_1])))
            self.lineEdit_pattern_fade_out_L_1.setText(str(int(lineCur[fadeOutAlise_L_1])))

    def load(self):
        qmessagebox = QMessageBox()
        if self.label_load_con.text() == '已导入':
            qmessagebox.warning(self, '警告', '文件已导入')
            return

        if self.lineEdit_operater.text() == '':
            qmessagebox.warning(self, '警告', '请输入操作员姓名')
            return

        if self.lineEdit_date.text() == '':
            qmessagebox.warning(self, '警告', '请输入日期')
            return

        filePathLoad = os.path.dirname(os.path.realpath(sys.executable))
        # print(1)
        file = 'D:\pattern\动作修复 词目标注工具\词目动作原语模板标注工具 关键字段表格.xls'  # 文件路径
        try:
            wb = xlrd.open_workbook(filename=file)  # 用方法打开该文件路径下的文件
        except:
            qmessagebox.warning(self, '警告', '文件打开失败，请检查姓名、日期、表格是否被占用')
            return
        ws = wb.sheet_by_name("Sheet1")  # 打开该表格里的表单
        # print(1)
        for r in range(ws.nrows):  # 遍历行
            col = []
            for l in range(ws.ncols):  # 遍历列
                col.append(ws.cell(r, l).value)  # 将单元格中的值加入到列表中(r,l)相当于坐标系，cell（）为单元格，value为单元格的值
            dataBase.append(col)
        # pprint(dataBase[0])
        self.label_load_con.setText('已导入')
        for i in dataBase[0]:
            key_label.append(i)
            data_dict_oneLine[str(i)] = ''

        # print(data_dict_oneLine)
        for i in range(1, len(dataBase)):
            data_dict_line_tmp = data_dict_oneLine.copy()
            for j in range(len(key_label)):
                data_dict_line_tmp[key_label[j]] = dataBase[i][j]
            dataGroup.append(data_dict_line_tmp)
        # print(dataGroup[0]['describe'])
        index_cur = 0
        self.refresh(index_cur)

    def dataUpdate(self):
        if self.checkBox_L_1.isChecked():
            dataGroup[index_cur][patterAlise_L_1] = float(self.lineEdit_pattern_index_L_1.text())
            dataGroup[index_cur][startAlise_L_1] = float(self.lineEdit_pattern_start_L_1.text())
            dataGroup[index_cur][endAlise_L_1] = float(self.lineEdit_pattern_end_L_1.text())
            dataGroup[index_cur][fadeInAlise_L_1] = float(self.lineEdit_pattern_fade_in_L_1.text())
            dataGroup[index_cur][fadeOutAlise_L_1] = float(self.lineEdit_pattern_fade_out_L_1.text())

        if self.checkBox_L_2.isChecked():
            dataGroup[index_cur][patterAlise_L_2] = float(self.lineEdit_pattern_index_L_2.text())
            dataGroup[index_cur][startAlise_L_2] = float(self.lineEdit_pattern_start_L_2.text())
            dataGroup[index_cur][endAlise_L_2] = float(self.lineEdit_pattern_end_L_2.text())
            dataGroup[index_cur][fadeInAlise_L_2] = float(self.lineEdit_pattern_fade_in_L_2.text())
            dataGroup[index_cur][fadeOutAlise_L_2] = float(self.lineEdit_pattern_fade_out_L_2.text())

        if self.checkBox_L_3.isChecked():
            dataGroup[index_cur][patterAlise_L_3] = float(self.lineEdit_pattern_index_L_3.text())
            dataGroup[index_cur][startAlise_L_3] = float(self.lineEdit_pattern_start_L_3.text())
            dataGroup[index_cur][endAlise_L_3] = float(self.lineEdit_pattern_end_L_3.text())
            dataGroup[index_cur][fadeInAlise_L_3] = float(self.lineEdit_pattern_fade_in_L_3.text())
            dataGroup[index_cur][fadeOutAlise_L_3] = float(self.lineEdit_pattern_fade_out_L_3.text())

        if self.checkBox_L_4.isChecked():
            dataGroup[index_cur][patterAlise_L_4] = float(self.lineEdit_pattern_index_L_4.text())
            dataGroup[index_cur][startAlise_L_4] = float(self.lineEdit_pattern_start_L_4.text())
            dataGroup[index_cur][endAlise_L_4] = float(self.lineEdit_pattern_end_L_4.text())
            dataGroup[index_cur][fadeInAlise_L_4] = float(self.lineEdit_pattern_fade_in_L_4.text())
            dataGroup[index_cur][fadeOutAlise_L_4] = float(self.lineEdit_pattern_fade_out_L_4.text())
        if self.checkBox_R_1.isChecked():
            dataGroup[index_cur][patterAlise_R_1] = float(self.lineEdit_pattern_index_R_1.text())
            dataGroup[index_cur][startAlise_R_1] = float(self.lineEdit_pattern_start_R_1.text())
            dataGroup[index_cur][endAlise_R_1] = float(self.lineEdit_pattern_end_R_1.text())
            dataGroup[index_cur][fadeInAlise_R_1] = float(self.lineEdit_pattern_fade_in_R_1.text())
            dataGroup[index_cur][fadeOutAlise_R_1] = float(self.lineEdit_pattern_fade_out_R_1.text())
        if self.checkBox_R_2.isChecked():
            dataGroup[index_cur][patterAlise_R_2] = float(self.lineEdit_pattern_index_R_2.text())
            dataGroup[index_cur][startAlise_R_2] = float(self.lineEdit_pattern_start_R_2.text())
            dataGroup[index_cur][endAlise_R_2] = float(self.lineEdit_pattern_end_R_2.text())
            dataGroup[index_cur][fadeInAlise_R_2] = float(self.lineEdit_pattern_fade_in_R_2.text())
            dataGroup[index_cur][fadeOutAlise_R_2] = float(self.lineEdit_pattern_fade_out_R_2.text())
        if self.checkBox_R_3.isChecked():
            dataGroup[index_cur][patterAlise_R_3] = float(self.lineEdit_pattern_index_R_3.text())
            dataGroup[index_cur][startAlise_R_3] = float(self.lineEdit_pattern_start_R_3.text())
            dataGroup[index_cur][endAlise_R_3] = float(self.lineEdit_pattern_end_R_3.text())
            dataGroup[index_cur][fadeInAlise_R_3] = float(self.lineEdit_pattern_fade_in_R_3.text())
            dataGroup[index_cur][fadeOutAlise_R_3] = float(self.lineEdit_pattern_fade_out_R_3.text())
        if self.checkBox_R_4.isChecked():
            dataGroup[index_cur][patterAlise_R_4] = float(self.lineEdit_pattern_index_R_4.text())
            dataGroup[index_cur][startAlise_R_4] = float(self.lineEdit_pattern_start_R_4.text())
            dataGroup[index_cur][endAlise_R_4] = float(self.lineEdit_pattern_end_R_4.text())
            dataGroup[index_cur][fadeInAlise_R_4] = float(self.lineEdit_pattern_fade_in_R_4.text())
            dataGroup[index_cur][fadeOutAlise_R_4] = float(self.lineEdit_pattern_fade_out_R_4.text())


    def save(self):
        qmessagebox = QMessageBox()

        workbook = xlwt.Workbook(encoding='utf-8')
        ws = workbook.add_sheet("Sheet1")
        self.dataUpdate()

        rows = len(dataBase)
        lines = len(dataBase[0])
        print(rows)
        for i in range(rows):
            for j in range(lines):
                if i != 0:
                    dataBase[i][j] = dataGroup[i - 1][key_label[j]]
                ws.write(i, j, dataBase[i][j])
        try:
            workbook.save(r'D:\pattern\动作修复 词目标注工具\词目动作原语模板标注工具 关键字段表格.xls')
        except:
            qmessagebox.warning(self, '警告', '文件保存失败请检查姓名、日期、表格是否被占用')
            return
        # self.load()
        qmessagebox.about(self, '保存文件', '保存成功')

        self.label_save_condi.setText("文件已保存")
        saveCon = 1

    def glossNext(self):
        qmessagebox = QMessageBox()

        global index_cur
        if index_cur + 1 >= len(dataGroup):
            qmessagebox.warning(self, '警告', '没有下一个词')
            return
        index_cur += 1

        self.refresh(index_cur)


    def glossprev(self):
        return

    def toIndex(self):
        return

    def checkCon(self):
        qmessagebox = QMessageBox()
        if self.radioButton_1.isChecked() + self.radioButton_2.isChecked() + self.radioButton_3.isChecked() == 0:
            qmessagebox.warning(self, '警告', '请至少选择一项处理意见')
            return 0
        return 1

    def open_video_res(self):
        class Video(object):
            def __init__(self, path):
                self.path = path

            def play(self):
                from os import startfile
                startfile(self.path, "open")

        class Movie_MP4(Video):
            type = 'MP4'  # 此处以MP4格式为例


        movie = Movie_MP4(r'D:\pattern\video\1_1_阿昌族.mp4')
        movie.play()

    def set_link_able_L(self):
        if self.checkBox_L_1.isChecked():
            self.checkBox_L_2.setEnabled(1)
            # self.set_L_2_able_all(1)
        else:
            self.checkBox_L_2.setChecked(0)
            self.checkBox_L_2.setEnabled(0)
            self.set_L_2_able_all(0)
        if self.checkBox_L_2.isChecked():
            # self.set_L_3_able_all(1)
            self.checkBox_L_3.setEnabled(1)
        else:
            self.checkBox_L_3.setChecked(0)
            self.checkBox_L_3.setEnabled(0)
            self.set_L_3_able_all(0)

        if self.checkBox_L_3.isChecked():
            self.checkBox_L_4.setEnabled(1)
            # self.set_L_4_able_all(1)
        else:
            self.checkBox_L_4.setChecked(0)
            self.checkBox_L_4.setEnabled(0)
            self.set_L_4_able_all(0)

    def set_L_1_able_all(self, con: bool):
        self.lineEdit_pattern_index_L_1.setEnabled(con)
        self.lineEdit_pattern_fade_in_L_1.setEnabled(con)
        self.lineEdit_pattern_end_L_1.setEnabled(con)
        self.lineEdit_pattern_fade_out_L_1.setEnabled(con)
        self.lineEdit_pattern_start_L_1.setEnabled(con)

    def set_L_1_able(self):
        if self.checkBox_L_1.isChecked():
            self.set_L_1_able_all(True)
        else:
            self.set_L_1_able_all(False)
        self.set_link_able_L()

    def set_L_2_able_all(self, con: bool):
        self.lineEdit_pattern_index_L_2.setEnabled(con)
        self.lineEdit_pattern_fade_in_L_2.setEnabled(con)
        self.lineEdit_pattern_end_L_2.setEnabled(con)
        self.lineEdit_pattern_fade_out_L_2.setEnabled(con)
        self.lineEdit_pattern_start_L_2.setEnabled(con)

    def set_L_2_able(self):
        if self.checkBox_L_2.isChecked():
            self.set_L_2_able_all(True)
        else:
            self.set_L_2_able_all(False)
        self.set_link_able_L()

    def set_L_3_able_all(self, con: bool):
        self.lineEdit_pattern_index_L_3.setEnabled(con)
        self.lineEdit_pattern_fade_in_L_3.setEnabled(con)
        self.lineEdit_pattern_end_L_3.setEnabled(con)
        self.lineEdit_pattern_fade_out_L_3.setEnabled(con)
        self.lineEdit_pattern_start_L_3.setEnabled(con)

    def set_L_3_able(self):
        if self.checkBox_L_3.isChecked():
            self.set_L_3_able_all(True)
        else:
            self.set_L_3_able_all(False)
        self.set_link_able_L()

    def set_L_4_able_all(self, con: bool):
        self.lineEdit_pattern_index_L_4.setEnabled(con)
        self.lineEdit_pattern_fade_in_L_4.setEnabled(con)
        self.lineEdit_pattern_end_L_4.setEnabled(con)
        self.lineEdit_pattern_fade_out_L_4.setEnabled(con)
        self.lineEdit_pattern_start_L_4.setEnabled(con)

    def set_L_4_able(self):
        if self.checkBox_L_4.isChecked():
            self.set_L_4_able_all(True)
        else:
            self.set_L_4_able_all(False)

        self.set_link_able_L()

    def set_link_able_R(self):
        if self.checkBox_R_1.isChecked():
            self.checkBox_R_2.setEnabled(1)
        else:
            self.checkBox_R_2.setChecked(0)
            self.checkBox_R_2.setEnabled(0)
            self.set_R_2_able_all(0)
        if self.checkBox_R_2.isChecked():
            # self.set_R_3_able_all(1)
            self.checkBox_R_3.setEnabled(1)
        else:
            self.checkBox_R_3.setChecked(0)
            self.checkBox_R_3.setEnabled(0)
            self.set_R_3_able_all(0)

        if self.checkBox_R_3.isChecked():
            self.checkBox_R_4.setEnabled(1)
            # self.set_R_4_able_all(1)
        else:
            self.checkBox_R_4.setChecked(0)
            self.checkBox_R_4.setEnabled(0)
            self.set_R_4_able_all(0)

    def set_R_1_able_all(self, con: bool):
        self.lineEdit_pattern_index_R_1.setEnabled(con)
        self.lineEdit_pattern_fade_in_R_1.setEnabled(con)
        self.lineEdit_pattern_end_R_1.setEnabled(con)
        self.lineEdit_pattern_fade_out_R_1.setEnabled(con)
        self.lineEdit_pattern_start_R_1.setEnabled(con)

    def set_R_1_able(self):
        if self.checkBox_R_1.isChecked():
            self.set_R_1_able_all(True)
        else:

            self.set_R_1_able_all(False)

        self.set_link_able_R()

    def set_R_2_able_all(self, con: bool):
        self.lineEdit_pattern_index_R_2.setEnabled(con)
        self.lineEdit_pattern_fade_in_R_2.setEnabled(con)
        self.lineEdit_pattern_end_R_2.setEnabled(con)
        self.lineEdit_pattern_fade_out_R_2.setEnabled(con)
        self.lineEdit_pattern_start_R_2.setEnabled(con)

    def set_R_2_able(self):
        if self.checkBox_R_2.isChecked():
            self.set_R_2_able_all(True)
        else:
            self.set_R_2_able_all(False)

        self.set_link_able_R()

    def set_R_3_able_all(self, con: bool):
        self.lineEdit_pattern_index_R_3.setEnabled(con)
        self.lineEdit_pattern_fade_in_R_3.setEnabled(con)
        self.lineEdit_pattern_end_R_3.setEnabled(con)
        self.lineEdit_pattern_fade_out_R_3.setEnabled(con)
        self.lineEdit_pattern_start_R_3.setEnabled(con)

    def set_R_3_able(self):
        if self.checkBox_R_3.isChecked():
            self.set_R_3_able_all(True)
        else:
            self.set_R_3_able_all(False)

        self.set_link_able_R()

    def set_R_4_able_all(self, con: bool):
        self.lineEdit_pattern_index_R_4.setEnabled(con)
        self.lineEdit_pattern_fade_in_R_4.setEnabled(con)
        self.lineEdit_pattern_end_R_4.setEnabled(con)
        self.lineEdit_pattern_fade_out_R_4.setEnabled(con)
        self.lineEdit_pattern_start_R_4.setEnabled(con)

    def set_R_4_able(self):
        if self.checkBox_R_4.isChecked():
            self.set_R_4_able_all(True)
        else:
            self.set_R_4_able_all(False)

        self.set_link_able_R()

if __name__ == '__main__':
    # dataBase_csv = csv.reader(open(r'D:\UI\word_box\data\data_w_rep.csv', 'r'))
    QApplication.setHighDpiScaleFactorRoundingPolicy(Qt.HighDpiScaleFactorRoundingPolicy.PassThrough)
    app = QApplication(sys.argv)
    myWindow = MyWindow()
    myWindow.show()

    sys.exit(app.exec_())
